                ; Generated by PSoC Designer 5.0.985.0
                ;
 0001           waiting_BIT:	equ	 1h
 0000           waiting_ORD:	equ	 0
 0000           waiting_ADDR_OFF:	equ	 0
 0002           hello_BIT:	equ	 2h
 0001           hello_ORD:	equ	 1
 0000           hello_ADDR_OFF:	equ	 0
 0004           initial_BIT:	equ	 4h
 0002           initial_ORD:	equ	 2
 0000           initial_ADDR_OFF:	equ	 0
 0008           my_response_BIT:	equ	 8h
 0003           my_response_ORD:	equ	 3
 0000           my_response_ADDR_OFF:	equ	 0
 0010           response1_BIT:	equ	10h
 0004           response1_ORD:	equ	 4
 0000           response1_ADDR_OFF:	equ	 0
 0020           response2_BIT:	equ	20h
 0005           response2_ORD:	equ	 5
 0000           response2_ADDR_OFF:	equ	 0
 0040           response3_BIT:	equ	40h
 0006           response3_ORD:	equ	 6
 0000           response3_ADDR_OFF:	equ	 0
 0080           response4_BIT:	equ	80h
 0007           response4_ORD:	equ	 7
 0000           response4_ADDR_OFF:	equ	 0
 0001           servo_transmit_BIT:	equ	 1h
 0008           servo_transmit_ORD:	equ	 8
 0001           servo_transmit_ADDR_OFF:	equ	 1
 0000           ;==========================================================================
 0000           ;  PSoCConfig.asm
 0000           ;  @PSOC_VERSION
 0000           ;
 0000           ;  Version: 0.85
 0000           ;  Revised: June 22, 2004
 0000           ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
 0000           ;
 0000           ;  This file is generated by the Device Editor on Application Generation.
 0000           ;  It contains code which loads the configuration data table generated in
 0000           ;  the file PSoCConfigTBL.asm
 0000           ;
 0000           ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
 0000           ;  Edits to this file will not be preserved.
 0000           ;==========================================================================
 0000           ;
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 6
 0018           PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
 0019           PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
 001A           PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
 001B           PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBB20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBB20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBB20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBB21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBB21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBB21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCB22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCB23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30DR0:     equ 50h          ; data register 0                          (#)
 0051           DBB30DR1:     equ 51h          ; data register 1                          (W)
 0052           DBB30DR2:     equ 52h          ; data register 2                          (RW)
 0053           DBB30CR0:     equ 53h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31DR0:     equ 54h          ; data register 0                          (#)
 0055           DBB31DR1:     equ 55h          ; data register 1                          (W)
 0056           DBB31DR2:     equ 56h          ; data register 2                          (RW)
 0057           DBB31CR0:     equ 57h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32DR0:     equ 58h          ; data register 0                          (#)
 0059           DCB32DR1:     equ 59h          ; data register 1                          (W)
 005A           DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
 005B           DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33DR0:     equ 5Ch          ; data register 0                          (#)
 005D           DCB33DR1:     equ 5Dh          ; data register 1                          (W)
 005E           DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
 005F           DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 00C0           RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
 0000           
 00C8           RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
 00C9           RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
 00CA           RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
 00CB           RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
 00CC           RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
 00CD           RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
 00CE           RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000                                          ; Also see DEC_CR2 in bank 1
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 6
 0018           PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
 0019           PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
 001A           PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
 001B           PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBB20IN:      equ 41h          ;    Input Register                        (RW)
 0042           DBB20OU:      equ 42h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBB21IN:      equ 45h          ;    Input Register                        (RW)
 0046           DBB21OU:      equ 46h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCB22IN:      equ 49h          ;    Input Register                        (RW)
 004A           DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
 004E           DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30FN:      equ 50h          ; Function Register                        (RW)
 0051           DBB30IN:      equ 51h          ;    Input Register                        (RW)
 0052           DBB30OU:      equ 52h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31FN:      equ 54h          ; Function Register                        (RW)
 0055           DBB31IN:      equ 55h          ;    Input Register                        (RW)
 0056           DBB31OU:      equ 56h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32FN:      equ 58h          ; Function Register                        (RW)
 0059           DCB32IN:      equ 59h          ;    Input Register                        (RW)
 005A           DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33FN:      equ 5Ch          ; Function Register                        (RW)
 005D           DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
 005E           DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0007           SYSTEM_STACK_PAGE: equ 7   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C29000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0003           CPU_CLOCK:				equ	3h		;CPU clock value
 0007           CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
 0003           CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
 0000           SELECT_32K:				equ	0h		;32K select value
 0080           SELECT_32K_MASK:		equ	80h		;32K select mask
 0000           SELECT_32K_JUST:		equ	0h		;32K select value justified
 0000           PLL_MODE:				equ	0h		;PLL mode value
 0040           PLL_MODE_MASK:			equ	40h		;PLL mode mask
 0000           PLL_MODE_JUST:			equ	0h		;PLL mode value justified
 0000           SLEEP_TIMER:			equ	0h		;Sleep Timer value
 0018           SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
 0000           SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
 0001           SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
 0080           SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
 0080           SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
 0000           LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
 0008           LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
 0000           LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
 0007           TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
 0007           TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
 0007           TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
 0000           
 0010           POWER_SETTING:			equ	10h
 0010           POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
 0010           POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
 0011           POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
 0008           POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
 0008           POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
 0009           POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
 0006           POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
 0004           POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
 0002           POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
 0001           POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
 0000           
 0001           COMM_RX_PRESENT:		equ	1		;1 = TRUE
 0000           WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
 0000           
 0009           CLOCK_DIV_VC1:			equ	9h	;VC1 clock divider
 00F0           CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
 0090           CLOCK_DIV_VC1_JUST:		equ	90h	;VC1 clock divider justified
 0009           CLOCK_DIV_VC2:			equ	9h	;VC2 clock divider
 000F           CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
 0009           CLOCK_DIV_VC2_JUST:		equ	9h	;VC2 clock divider justified
 0003           CLOCK_INPUT_VC3:		equ	3h	;VC3 clock source
 0003           CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
 0003           CLOCK_INPUT_VC3_JUST:	equ	3h	;VC3 clock source justified
 0005           CLOCK_DIV_VC3:			equ	5h	;VC3 clock divider
 00FF           CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
 0005           CLOCK_DIV_VC3_JUST:		equ	5h	;VC3 clock divider justified
 0001           ANALOG_BUFFER_PWR:		equ	1h	;Analog buffer power level
 0001           ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
 0001           ANALOG_BUFFER_PWR_JUST:	equ	1h	;Analog buffer power level justified
 0005           ANALOG_POWER:			equ	5h	;Analog power control
 0007           ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
 0005           ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
 0001           OP_AMP_BIAS:			equ	1h	;Op amp bias level
 0040           OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
 0040           OP_AMP_BIAS_JUST:		equ	40h	;Op amp bias level justified
 0002           REF_MUX:				equ	2h	;Ref mux setting
 0038           REF_MUX_MASK:			equ	38h	;Ref mux setting mask
 0010           REF_MUX_JUST:			equ	10h	;Ref mux setting justified
 0000           AGND_BYPASS:				equ	0h	;AGndBypass setting
 0040           AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
 0000           AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
 0000           SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
 0006           SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
 0000           SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
 0000           SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
 0001           SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
 0000           SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
 0000           ;
 0000           ; register initial values
 0000           ;
 0001           ANALOG_IO_CONTROL:		equ 1h	;Analog IO Control register (ABF_CR)
 001F           PORT_0_GLOBAL_SELECT:	equ 1fh	;Port 0 global select register (PRT0GS)
 001E           PORT_0_DRIVE_0:			equ 1eh	;Port 0 drive mode 0 register (PRT0DM0)
 00E1           PORT_0_DRIVE_1:			equ e1h	;Port 0 drive mode 1 register (PRT0DM1)
 00E0           PORT_0_DRIVE_2:			equ e0h	;Port 0 drive mode 2 register (PRT0DM2)
 0000           PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
 0000           PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
 0000           PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
 0000           PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
 00A8           PORT_1_DRIVE_0:			equ a8h	;Port 1 drive mode 0 register (PRT1DM0)
 0057           PORT_1_DRIVE_1:			equ 57h	;Port 1 drive mode 1 register (PRT1DM1)
 0057           PORT_1_DRIVE_2:			equ 57h	;Port 1 drive mode 2 register (PRT1DM2)
 0000           PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
 0000           PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
 0000           PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
 0000           PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
 0001           PORT_2_DRIVE_0:			equ 1h	;Port 2 drive mode 0 register (PRT2DM0)
 00FE           PORT_2_DRIVE_1:			equ feh	;Port 2 drive mode 1 register (PRT2DM1)
 00FE           PORT_2_DRIVE_2:			equ feh	;Port 2 drive mode 2 register (PRT2DM2)
 0000           PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
 0000           PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
 0000           PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
 0000           PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
 0000           PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
 0000           PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
 0000           PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
 0000           PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
 0000           PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
 0000           PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
 0000           PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
 0000           PORT_4_DRIVE_0:			equ 0h	;Port 4 drive mode 0 register (PRT4DM0)
 0000           PORT_4_DRIVE_1:			equ 0h	;Port 4 drive mode 1 register (PRT4DM1)
 0000           PORT_4_DRIVE_2:			equ 0h	;Port 4 drive mode 2 register (PRT4DM2)
 0000           PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
 0000           PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
 0000           PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
 0000           PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
 0000           PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
 0000           PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
 0000           PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
 0000           PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
 0000           PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
 0000           PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
 0000           PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
 0000           PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
 0000           PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
 0000           PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
 0000           PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
 0000           PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
 0000           PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
 0000           PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
 0000           PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
 0000           PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
 0000           PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
 0000           PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
 0000           PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
 0000           PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
 0000           
 0000           ; end of file GlobalParams.inc
 0000           
                export LoadConfigInit
                export _LoadConfigInit
                export LoadConfig_waiting
                export _LoadConfig_waiting
                export UnloadConfig_waiting
                export _UnloadConfig_waiting
                export ReloadConfig_waiting
                export _ReloadConfig_waiting
                export LoadConfig_hello
                export _LoadConfig_hello
                export UnloadConfig_hello
                export _UnloadConfig_hello
                export LoadConfig_initial
                export _LoadConfig_initial
                export UnloadConfig_initial
                export _UnloadConfig_initial
                export LoadConfig_my_response
                export _LoadConfig_my_response
                export UnloadConfig_my_response
                export _UnloadConfig_my_response
                export LoadConfig_response1
                export _LoadConfig_response1
                export UnloadConfig_response1
                export _UnloadConfig_response1
                export LoadConfig_response2
                export _LoadConfig_response2
                export UnloadConfig_response2
                export _UnloadConfig_response2
                export LoadConfig_response3
                export _LoadConfig_response3
                export UnloadConfig_response3
                export _UnloadConfig_response3
                export LoadConfig_response4
                export _LoadConfig_response4
                export UnloadConfig_response4
                export _UnloadConfig_response4
                export LoadConfig_servo_transmit
                export _LoadConfig_servo_transmit
                export UnloadConfig_servo_transmit
                export _UnloadConfig_servo_transmit
                export UnloadConfig_Total
                export _UnloadConfig_Total
                export ACTIVE_CONFIG_STATUS
                
                export NO_SHADOW
                export _NO_SHADOW
                
 0010           FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
 00FF           END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
 0000           
                AREA psoc_config(rom, rel)
                
                ;---------------------------------------------------------------------------
                ; LoadConfigInit - Establish the start-up configuration (except for a few
                ;                  parameters handled by boot code, like CPU speed). This
                ;                  function can be called from user code, but typically it
                ;                  is only called from boot.
                ;
                ;       INPUTS: None.
                ;      RETURNS: Nothing.
                ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                ;               In the large memory model currently only the page
                ;               pointer registers listed below are modified.  This does
                ;               not guarantee that in future implementations of this
                ;               function other page pointer registers will not be
                ;               modified.
                ;          
                ;               Page Pointer Registers Modified: 
                ;               CUR_PP
                ;
 0000           _LoadConfigInit:
 0000            LoadConfigInit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0003 550000            mov             [ACTIVE_CONFIG_STATUS], 0
 0006 550100            mov             [ACTIVE_CONFIG_STATUS+1], 0
 0009           
 0009 7C0010            lcall   LoadConfig_waiting
 000C 7C0000            lcall   LoadConfigTBL_waiting_Ordered
 000F           
 000F           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 000F 7F            ret
 0010           
 0010           ;---------------------------------------------------------------------------
 0010           ; Load Configuration waiting
 0010           ;
 0010           ;    Load configuration registers for waiting.
 0010           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0010           ;
 0010           ;       INPUTS: None.
 0010           ;      RETURNS: Nothing.
 0010           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0010           ;               modified as may the Page Pointer registers!
 0010           ;               In the large memory model currently only the page
 0010           ;               pointer registers listed below are modified.  This does
 0010           ;               not guarantee that in future implementations of this
 0010           ;               function other page pointer registers will not be
 0010           ;               modified.
 0010           ;          
 0010           ;               Page Pointer Registers Modified: 
 0010           ;               CUR_PP
 0010           ;
 0010           _LoadConfig_waiting:
 0010            LoadConfig_waiting:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0010 7110          or    F, FLAG_XIO_MASK
 0012           
 0012 10                push    x
 0013 70EF          and   F, ~FLAG_XIO_MASK
 0015 5000          mov     a, 0                    ; Specify bank 0
 0017 67            asr     a                       ; Store in carry flag
 0018                                               ; Load bank 0 table:
 0018 5000          mov     A, >LoadConfigTBL_waiting_Bank0
 001A 5700          mov     X, <LoadConfigTBL_waiting_Bank0
 001C 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 001F           
 001F 5001          mov     a, 1                    ; Specify bank 1
 0021 67            asr     a                       ; Store in carry flag
 0022                                               ; Load bank 1 table:
 0022 5000          mov     A, >LoadConfigTBL_waiting_Bank1
 0024 5700          mov     X, <LoadConfigTBL_waiting_Bank1
 0026 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 0029           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0029 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 002C 2E0001            or              [ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
 002F 70EF          and   F, ~FLAG_XIO_MASK
 0031 20                pop             x
 0032           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0032 7F            ret
 0033           
 0033           ;---------------------------------------------------------------------------
 0033           ; Reload Configuration waiting
 0033           ;
 0033           ;    Reload configuration registers for waiting.
 0033           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0033           ;
 0033           ;       INPUTS: None.
 0033           ;      RETURNS: Nothing.
 0033           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0033           ;               modified as may the Page Pointer registers!
 0033           ;               In the large memory model currently only the page
 0033           ;               pointer registers listed below are modified.  This does
 0033           ;               not guarantee that in future implementations of this
 0033           ;               function other page pointer registers will not be
 0033           ;               modified.
 0033           ;          
 0033           ;               Page Pointer Registers Modified: 
 0033           ;               CUR_PP
 0033           ;
 0033           _ReloadConfig_waiting:
 0033            ReloadConfig_waiting:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0033 10                push    x
 0034 70EF          and   F, ~FLAG_XIO_MASK
 0036 5000          mov     a, 0                    ; Specify bank 0
 0038 67            asr     a                       ; Store in carry flag
 0039                                               ; Bank 0 table address:
 0039 5000          mov     A, >ReloadConfigTBL_waiting_Bank0
 003B 5700          mov     X, <ReloadConfigTBL_waiting_Bank0
 003D 7C05D0        lcall   LoadConfig              ; Reload the bank 0 values
 0040           
 0040 5001          mov     a, 1                    ; Specify bank 1
 0042 67            asr     a                       ; Store in carry flag
 0043                                               ; Bank 1 table address:
 0043 5000          mov     A, >ReloadConfigTBL_waiting_Bank1
 0045 5700          mov     X, <ReloadConfigTBL_waiting_Bank1
 0047 7C05D0        lcall   LoadConfig              ; Reload the bank 1 values
 004A           
 004A           ; set config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 004A 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 004D 2E0001            or              [ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
 0050 70EF          and   F, ~FLAG_XIO_MASK
 0052 20                pop             x
 0053           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0053 7F            ret
 0054           
 0054           ;---------------------------------------------------------------------------
 0054           ; Unload Configuration waiting
 0054           ;
 0054           ;    Reset configuration registers for waiting
 0054           ;    to their values as initially configured.
 0054           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0054           ;
 0054           ;       INPUTS: None.
 0054           ;      RETURNS: Nothing.
 0054           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0054           ;               modified as may the Page Pointer registers!
 0054           ;               In the large memory model currently only the page
 0054           ;               pointer registers listed below are modified.  This does
 0054           ;               not guarantee that in future implementations of this
 0054           ;               function other page pointer registers will not be
 0054           ;               modified.
 0054           ;          
 0054           ;               Page Pointer Registers Modified: 
 0054           ;               CUR_PP
 0054           ;
 0054           _UnloadConfig_waiting:
 0054            UnloadConfig_waiting:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0054 10                push    x
 0055 70EF          and   F, ~FLAG_XIO_MASK
 0057 5000          mov     a, 0                    ; Specify bank 0
 0059 67            asr     a                       ; Store in carry flag
 005A                                               ; Bank 0 table address:
 005A 5000          mov     A, >UnloadConfigTBL_waiting_Bank0
 005C 5700          mov     X, <UnloadConfigTBL_waiting_Bank0
 005E 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 0061           
 0061 5001          mov     a, 1                    ; Specify bank 1
 0063 67            asr     a                       ; Store in carry flag
 0064                                               ; Bank 1 table address:
 0064 5000          mov     A, >UnloadConfigTBL_waiting_Bank1
 0066 5700          mov     X, <UnloadConfigTBL_waiting_Bank1
 0068 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 006B           
 006B 70EF          and   F, ~FLAG_XIO_MASK
 006D           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 006D 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0070 2600FE            and             [ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], ~waiting_BIT
 0073 70EF          and   F, ~FLAG_XIO_MASK
 0075 20                pop             x
 0076           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0076 7F            ret
 0077           
 0077           ;---------------------------------------------------------------------------
 0077           ; Load Configuration hello
 0077           ;
 0077           ;    Load configuration registers for hello.
 0077           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0077           ;
 0077           ;       INPUTS: None.
 0077           ;      RETURNS: Nothing.
 0077           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0077           ;               modified as may the Page Pointer registers!
 0077           ;               In the large memory model currently only the page
 0077           ;               pointer registers listed below are modified.  This does
 0077           ;               not guarantee that in future implementations of this
 0077           ;               function other page pointer registers will not be
 0077           ;               modified.
 0077           ;          
 0077           ;               Page Pointer Registers Modified: 
 0077           ;               CUR_PP
 0077           ;
 0077           _LoadConfig_hello:
 0077            LoadConfig_hello:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0077 7110          or    F, FLAG_XIO_MASK
 0079           ; writing Port_0_DriveMode_0 register
 0079 4100E1            and             reg[ 0h], ~1eh
 007C           ; writing Port_0_DriveMode_1 register
 007C 4101E1            and             reg[ 1h], ~1eh
 007F 43011E            or              reg[ 1h], 1eh
 0082           ; writing Port_0_DriveMode_2 register
 0082 70EF          and   F, ~FLAG_XIO_MASK
 0084 4103FE            and             reg[ 3h], ~ 1h
 0087 430301            or              reg[ 3h],  1h
 008A           ; writing Port_0_GlobalSelect register
 008A 4102FE            and             reg[ 2h], ~ 1h
 008D           ; writing Row_0_LogicSelect_0 register
 008D 41B3F0            and             reg[b3h], ~ fh
 0090 43B303            or              reg[b3h],  3h
 0093           ; writing Row_0_LogicSelect_1 register
 0093 41B4F0            and             reg[b4h], ~ fh
 0096 43B403            or              reg[b4h],  3h
 0099           ; writing Row_0_OutputDrive_0 register
 0099 41B5ED            and             reg[b5h], ~12h
 009C           ; writing Row_0_OutputDrive_1 register
 009C 41B6EE            and             reg[b6h], ~11h
 009F           ; writing Row_1_InputMux register
 009F 41B83C            and             reg[b8h], ~c3h
 00A2 43B801            or              reg[b8h],  1h
 00A5           
 00A5 10                push    x
 00A6 70EF          and   F, ~FLAG_XIO_MASK
 00A8 5000          mov     a, 0                    ; Specify bank 0
 00AA 67            asr     a                       ; Store in carry flag
 00AB                                               ; Load bank 0 table:
 00AB 5000          mov     A, >LoadConfigTBL_hello_Bank0
 00AD 5700          mov     X, <LoadConfigTBL_hello_Bank0
 00AF 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 00B2           
 00B2 5001          mov     a, 1                    ; Specify bank 1
 00B4 67            asr     a                       ; Store in carry flag
 00B5                                               ; Load bank 1 table:
 00B5 5000          mov     A, >LoadConfigTBL_hello_Bank1
 00B7 5700          mov     X, <LoadConfigTBL_hello_Bank1
 00B9 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 00BC           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00BC 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 00BF 2E0002            or              [ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], hello_BIT
 00C2 70EF          and   F, ~FLAG_XIO_MASK
 00C4 20                pop             x
 00C5           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00C5 7F            ret
 00C6           
 00C6           ;---------------------------------------------------------------------------
 00C6           ; Unload Configuration hello
 00C6           ;
 00C6           ;    Reset configuration registers for hello
 00C6           ;    to their values as initially configured.
 00C6           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 00C6           ;
 00C6           ;       INPUTS: None.
 00C6           ;      RETURNS: Nothing.
 00C6           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 00C6           ;               modified as may the Page Pointer registers!
 00C6           ;               In the large memory model currently only the page
 00C6           ;               pointer registers listed below are modified.  This does
 00C6           ;               not guarantee that in future implementations of this
 00C6           ;               function other page pointer registers will not be
 00C6           ;               modified.
 00C6           ;          
 00C6           ;               Page Pointer Registers Modified: 
 00C6           ;               CUR_PP
 00C6           ;
 00C6           _UnloadConfig_hello:
 00C6            UnloadConfig_hello:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 00C6 10                push    x
 00C7 70EF          and   F, ~FLAG_XIO_MASK
 00C9 5000          mov     a, 0                    ; Specify bank 0
 00CB 67            asr     a                       ; Store in carry flag
 00CC                                               ; Bank 0 table address:
 00CC 5000          mov     A, >UnloadConfigTBL_hello_Bank0
 00CE 5700          mov     X, <UnloadConfigTBL_hello_Bank0
 00D0 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 00D3           
 00D3 5001          mov     a, 1                    ; Specify bank 1
 00D5 67            asr     a                       ; Store in carry flag
 00D6                                               ; Bank 1 table address:
 00D6 5000          mov     A, >UnloadConfigTBL_hello_Bank1
 00D8 5700          mov     X, <UnloadConfigTBL_hello_Bank1
 00DA 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 00DD           
 00DD 70EF          and   F, ~FLAG_XIO_MASK
 00DF           ; writing Row_0_LogicSelect_0 register
 00DF 41B3F0            and             reg[b3h], ~ fh
 00E2 43B305            or              reg[b3h],  5h
 00E5           ; writing Row_0_LogicSelect_1 register
 00E5 41B4F0            and             reg[b4h], ~ fh
 00E8 43B405            or              reg[b4h],  5h
 00EB           ; writing Row_0_OutputDrive_0 register
 00EB 41B5ED            and             reg[b5h], ~12h
 00EE 43B512            or              reg[b5h], 12h
 00F1           ; writing Row_0_OutputDrive_1 register
 00F1 41B6EE            and             reg[b6h], ~11h
 00F4 43B611            or              reg[b6h], 11h
 00F7           ; writing Row_1_InputMux register
 00F7 41B83C            and             reg[b8h], ~c3h
 00FA 43B840            or              reg[b8h], 40h
 00FD           ; writing Port_0_GlobalSelect register
 00FD 4102FE            and             reg[ 2h], ~ 1h
 0100 430201            or              reg[ 2h],  1h
 0103           ; writing Port_0_DriveMode_2 register
 0103 4103FE            and             reg[ 3h], ~ 1h
 0106           ; writing Port_0_DriveMode_1 register
 0106 7110          or    F, FLAG_XIO_MASK
 0108 4101E1            and             reg[ 1h], ~1eh
 010B           ; writing Port_0_DriveMode_0 register
 010B 4100E1            and             reg[ 0h], ~1eh
 010E 43001E            or              reg[ 0h], 1eh
 0111 70EF          and   F, ~FLAG_XIO_MASK
 0113           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0113 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0116 2600FD            and             [ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], ~hello_BIT
 0119 70EF          and   F, ~FLAG_XIO_MASK
 011B 20                pop             x
 011C           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 011C 7F            ret
 011D           
 011D           ;---------------------------------------------------------------------------
 011D           ; Load Configuration initial
 011D           ;
 011D           ;    Load configuration registers for initial.
 011D           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 011D           ;
 011D           ;       INPUTS: None.
 011D           ;      RETURNS: Nothing.
 011D           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 011D           ;               modified as may the Page Pointer registers!
 011D           ;               In the large memory model currently only the page
 011D           ;               pointer registers listed below are modified.  This does
 011D           ;               not guarantee that in future implementations of this
 011D           ;               function other page pointer registers will not be
 011D           ;               modified.
 011D           ;          
 011D           ;               Page Pointer Registers Modified: 
 011D           ;               CUR_PP
 011D           ;
 011D           _LoadConfig_initial:
 011D            LoadConfig_initial:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 011D 7110          or    F, FLAG_XIO_MASK
 011F           ; writing Port_0_DriveMode_0 register
 011F 4100E1            and             reg[ 0h], ~1eh
 0122           ; writing Port_0_DriveMode_1 register
 0122 4101E1            and             reg[ 1h], ~1eh
 0125 43011E            or              reg[ 1h], 1eh
 0128           ; writing Port_0_DriveMode_2 register
 0128 70EF          and   F, ~FLAG_XIO_MASK
 012A 4103E1            and             reg[ 3h], ~1eh
 012D 43031E            or              reg[ 3h], 1eh
 0130           ; writing Port_0_GlobalSelect register
 0130 4102E1            and             reg[ 2h], ~1eh
 0133           ; writing Row_0_LogicSelect_0 register
 0133 41B3F0            and             reg[b3h], ~ fh
 0136 43B303            or              reg[b3h],  3h
 0139           ; writing Row_0_LogicSelect_1 register
 0139 41B4F0            and             reg[b4h], ~ fh
 013C 43B403            or              reg[b4h],  3h
 013F           ; writing Row_0_OutputDrive_0 register
 013F 41B5ED            and             reg[b5h], ~12h
 0142           ; writing Row_0_OutputDrive_1 register
 0142 41B6EE            and             reg[b6h], ~11h
 0145           ; writing Row_1_InputMux register
 0145 41B8FC            and             reg[b8h], ~ 3h
 0148 43B801            or              reg[b8h],  1h
 014B           ; writing VoltageMonitorControl register
 014B 7110          or    F, FLAG_XIO_MASK
 014D 41E3F8            and             reg[e3h], ~ 7h
 0150 43E303            or              reg[e3h],  3h
 0153           
 0153 10                push    x
 0154 70EF          and   F, ~FLAG_XIO_MASK
 0156 5000          mov     a, 0                    ; Specify bank 0
 0158 67            asr     a                       ; Store in carry flag
 0159                                               ; Load bank 0 table:
 0159 5000          mov     A, >LoadConfigTBL_initial_Bank0
 015B 5700          mov     X, <LoadConfigTBL_initial_Bank0
 015D 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 0160           
 0160 5001          mov     a, 1                    ; Specify bank 1
 0162 67            asr     a                       ; Store in carry flag
 0163                                               ; Load bank 1 table:
 0163 5000          mov     A, >LoadConfigTBL_initial_Bank1
 0165 5700          mov     X, <LoadConfigTBL_initial_Bank1
 0167 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 016A           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 016A 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 016D 2E0004            or              [ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], initial_BIT
 0170 70EF          and   F, ~FLAG_XIO_MASK
 0172 20                pop             x
 0173           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0173 7F            ret
 0174           
 0174           ;---------------------------------------------------------------------------
 0174           ; Unload Configuration initial
 0174           ;
 0174           ;    Reset configuration registers for initial
 0174           ;    to their values as initially configured.
 0174           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0174           ;
 0174           ;       INPUTS: None.
 0174           ;      RETURNS: Nothing.
 0174           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0174           ;               modified as may the Page Pointer registers!
 0174           ;               In the large memory model currently only the page
 0174           ;               pointer registers listed below are modified.  This does
 0174           ;               not guarantee that in future implementations of this
 0174           ;               function other page pointer registers will not be
 0174           ;               modified.
 0174           ;          
 0174           ;               Page Pointer Registers Modified: 
 0174           ;               CUR_PP
 0174           ;
 0174           _UnloadConfig_initial:
 0174            UnloadConfig_initial:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0174 10                push    x
 0175 70EF          and   F, ~FLAG_XIO_MASK
 0177 5000          mov     a, 0                    ; Specify bank 0
 0179 67            asr     a                       ; Store in carry flag
 017A                                               ; Bank 0 table address:
 017A 5000          mov     A, >UnloadConfigTBL_initial_Bank0
 017C 5700          mov     X, <UnloadConfigTBL_initial_Bank0
 017E 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 0181           
 0181 5001          mov     a, 1                    ; Specify bank 1
 0183 67            asr     a                       ; Store in carry flag
 0184                                               ; Bank 1 table address:
 0184 5000          mov     A, >UnloadConfigTBL_initial_Bank1
 0186 5700          mov     X, <UnloadConfigTBL_initial_Bank1
 0188 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 018B           
 018B 70EF          and   F, ~FLAG_XIO_MASK
 018D           ; writing Row_0_LogicSelect_0 register
 018D 41B3F0            and             reg[b3h], ~ fh
 0190 43B305            or              reg[b3h],  5h
 0193           ; writing Row_0_LogicSelect_1 register
 0193 41B4F0            and             reg[b4h], ~ fh
 0196 43B405            or              reg[b4h],  5h
 0199           ; writing Row_0_OutputDrive_0 register
 0199 41B5ED            and             reg[b5h], ~12h
 019C 43B512            or              reg[b5h], 12h
 019F           ; writing Row_0_OutputDrive_1 register
 019F 41B6EE            and             reg[b6h], ~11h
 01A2 43B611            or              reg[b6h], 11h
 01A5           ; writing Row_1_InputMux register
 01A5 41B8FC            and             reg[b8h], ~ 3h
 01A8           ; writing VoltageMonitorControl register
 01A8 7110          or    F, FLAG_XIO_MASK
 01AA 41E3F8            and             reg[e3h], ~ 7h
 01AD 43E307            or              reg[e3h],  7h
 01B0           ; writing Port_0_GlobalSelect register
 01B0 70EF          and   F, ~FLAG_XIO_MASK
 01B2 4102E1            and             reg[ 2h], ~1eh
 01B5 43021E            or              reg[ 2h], 1eh
 01B8           ; writing Port_0_DriveMode_2 register
 01B8 4103E1            and             reg[ 3h], ~1eh
 01BB           ; writing Port_0_DriveMode_1 register
 01BB 7110          or    F, FLAG_XIO_MASK
 01BD 4101E1            and             reg[ 1h], ~1eh
 01C0           ; writing Port_0_DriveMode_0 register
 01C0 4100E1            and             reg[ 0h], ~1eh
 01C3 43001E            or              reg[ 0h], 1eh
 01C6 70EF          and   F, ~FLAG_XIO_MASK
 01C8           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01C8 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 01CB 2600FB            and             [ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], ~initial_BIT
 01CE 70EF          and   F, ~FLAG_XIO_MASK
 01D0 20                pop             x
 01D1           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01D1 7F            ret
 01D2           
 01D2           ;---------------------------------------------------------------------------
 01D2           ; Load Configuration my_response
 01D2           ;
 01D2           ;    Load configuration registers for my_response.
 01D2           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 01D2           ;
 01D2           ;       INPUTS: None.
 01D2           ;      RETURNS: Nothing.
 01D2           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 01D2           ;               modified as may the Page Pointer registers!
 01D2           ;               In the large memory model currently only the page
 01D2           ;               pointer registers listed below are modified.  This does
 01D2           ;               not guarantee that in future implementations of this
 01D2           ;               function other page pointer registers will not be
 01D2           ;               modified.
 01D2           ;          
 01D2           ;               Page Pointer Registers Modified: 
 01D2           ;               CUR_PP
 01D2           ;
 01D2           _LoadConfig_my_response:
 01D2            LoadConfig_my_response:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01D2 7110          or    F, FLAG_XIO_MASK
 01D4           ; writing Port_0_DriveMode_0 register
 01D4 4100FE            and             reg[ 0h], ~ 1h
 01D7 430001            or              reg[ 0h],  1h
 01DA           ; writing Port_0_DriveMode_1 register
 01DA 4101FE            and             reg[ 1h], ~ 1h
 01DD           ; writing Row_0_OutputDrive_0 register
 01DD 70EF          and   F, ~FLAG_XIO_MASK
 01DF 41B5FE            and             reg[b5h], ~ 1h
 01E2 43B501            or              reg[b5h],  1h
 01E5           ; writing Row_1_InputMux register
 01E5 41B8FC            and             reg[b8h], ~ 3h
 01E8 43B801            or              reg[b8h],  1h
 01EB           
 01EB 10                push    x
 01EC 70EF          and   F, ~FLAG_XIO_MASK
 01EE 5000          mov     a, 0                    ; Specify bank 0
 01F0 67            asr     a                       ; Store in carry flag
 01F1                                               ; Load bank 0 table:
 01F1 5000          mov     A, >LoadConfigTBL_my_response_Bank0
 01F3 5700          mov     X, <LoadConfigTBL_my_response_Bank0
 01F5 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 01F8           
 01F8 5001          mov     a, 1                    ; Specify bank 1
 01FA 67            asr     a                       ; Store in carry flag
 01FB                                               ; Load bank 1 table:
 01FB 5000          mov     A, >LoadConfigTBL_my_response_Bank1
 01FD 5700          mov     X, <LoadConfigTBL_my_response_Bank1
 01FF 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 0202           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0202 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 0205 2E0008            or              [ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], my_response_BIT
 0208 70EF          and   F, ~FLAG_XIO_MASK
 020A 20                pop             x
 020B           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 020B 7F            ret
 020C           
 020C           ;---------------------------------------------------------------------------
 020C           ; Unload Configuration my_response
 020C           ;
 020C           ;    Reset configuration registers for my_response
 020C           ;    to their values as initially configured.
 020C           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 020C           ;
 020C           ;       INPUTS: None.
 020C           ;      RETURNS: Nothing.
 020C           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 020C           ;               modified as may the Page Pointer registers!
 020C           ;               In the large memory model currently only the page
 020C           ;               pointer registers listed below are modified.  This does
 020C           ;               not guarantee that in future implementations of this
 020C           ;               function other page pointer registers will not be
 020C           ;               modified.
 020C           ;          
 020C           ;               Page Pointer Registers Modified: 
 020C           ;               CUR_PP
 020C           ;
 020C           _UnloadConfig_my_response:
 020C            UnloadConfig_my_response:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 020C 10                push    x
 020D 70EF          and   F, ~FLAG_XIO_MASK
 020F 5000          mov     a, 0                    ; Specify bank 0
 0211 67            asr     a                       ; Store in carry flag
 0212                                               ; Bank 0 table address:
 0212 5000          mov     A, >UnloadConfigTBL_my_response_Bank0
 0214 5700          mov     X, <UnloadConfigTBL_my_response_Bank0
 0216 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 0219           
 0219 5001          mov     a, 1                    ; Specify bank 1
 021B 67            asr     a                       ; Store in carry flag
 021C                                               ; Bank 1 table address:
 021C 5000          mov     A, >UnloadConfigTBL_my_response_Bank1
 021E 5700          mov     X, <UnloadConfigTBL_my_response_Bank1
 0220 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 0223           
 0223 70EF          and   F, ~FLAG_XIO_MASK
 0225           ; writing Row_0_OutputDrive_0 register
 0225 41B5FE            and             reg[b5h], ~ 1h
 0228           ; writing Row_1_InputMux register
 0228 41B8FC            and             reg[b8h], ~ 3h
 022B           ; writing Port_0_DriveMode_1 register
 022B 7110          or    F, FLAG_XIO_MASK
 022D 4101FE            and             reg[ 1h], ~ 1h
 0230 430101            or              reg[ 1h],  1h
 0233           ; writing Port_0_DriveMode_0 register
 0233 4100FE            and             reg[ 0h], ~ 1h
 0236 70EF          and   F, ~FLAG_XIO_MASK
 0238           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0238 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 023B 2600F7            and             [ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], ~my_response_BIT
 023E 70EF          and   F, ~FLAG_XIO_MASK
 0240 20                pop             x
 0241           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0241 7F            ret
 0242           
 0242           ;---------------------------------------------------------------------------
 0242           ; Load Configuration response1
 0242           ;
 0242           ;    Load configuration registers for response1.
 0242           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0242           ;
 0242           ;       INPUTS: None.
 0242           ;      RETURNS: Nothing.
 0242           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0242           ;               modified as may the Page Pointer registers!
 0242           ;               In the large memory model currently only the page
 0242           ;               pointer registers listed below are modified.  This does
 0242           ;               not guarantee that in future implementations of this
 0242           ;               function other page pointer registers will not be
 0242           ;               modified.
 0242           ;          
 0242           ;               Page Pointer Registers Modified: 
 0242           ;               CUR_PP
 0242           ;
 0242           _LoadConfig_response1:
 0242            LoadConfig_response1:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0242 7110          or    F, FLAG_XIO_MASK
 0244           ; writing Port_0_DriveMode_0 register
 0244 4100E0            and             reg[ 0h], ~1fh
 0247 430001            or              reg[ 0h],  1h
 024A           ; writing Port_0_DriveMode_1 register
 024A 4101E0            and             reg[ 1h], ~1fh
 024D 43011E            or              reg[ 1h], 1eh
 0250           ; writing Port_0_DriveMode_2 register
 0250 70EF          and   F, ~FLAG_XIO_MASK
 0252 4103E3            and             reg[ 3h], ~1ch
 0255 43031C            or              reg[ 3h], 1ch
 0258           ; writing Port_0_GlobalSelect register
 0258 4102E3            and             reg[ 2h], ~1ch
 025B           ; writing Row_0_LogicSelect_0 register
 025B 41B3F0            and             reg[b3h], ~ fh
 025E 43B303            or              reg[b3h],  3h
 0261           ; writing Row_0_LogicSelect_1 register
 0261 41B4F0            and             reg[b4h], ~ fh
 0264 43B403            or              reg[b4h],  3h
 0267           ; writing Row_0_OutputDrive_0 register
 0267 41B5EC            and             reg[b5h], ~13h
 026A 43B501            or              reg[b5h],  1h
 026D           ; writing Row_0_OutputDrive_1 register
 026D 41B6EE            and             reg[b6h], ~11h
 0270           ; writing Row_1_InputMux register
 0270 41B8FC            and             reg[b8h], ~ 3h
 0273 43B801            or              reg[b8h],  1h
 0276           
 0276 10                push    x
 0277 70EF          and   F, ~FLAG_XIO_MASK
 0279 5000          mov     a, 0                    ; Specify bank 0
 027B 67            asr     a                       ; Store in carry flag
 027C                                               ; Load bank 0 table:
 027C 5000          mov     A, >LoadConfigTBL_response1_Bank0
 027E 5700          mov     X, <LoadConfigTBL_response1_Bank0
 0280 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 0283           
 0283 5001          mov     a, 1                    ; Specify bank 1
 0285 67            asr     a                       ; Store in carry flag
 0286                                               ; Load bank 1 table:
 0286 5000          mov     A, >LoadConfigTBL_response1_Bank1
 0288 5700          mov     X, <LoadConfigTBL_response1_Bank1
 028A 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 028D           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 028D 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 0290 2E0010            or              [ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], response1_BIT
 0293 70EF          and   F, ~FLAG_XIO_MASK
 0295 20                pop             x
 0296           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0296 7F            ret
 0297           
 0297           ;---------------------------------------------------------------------------
 0297           ; Unload Configuration response1
 0297           ;
 0297           ;    Reset configuration registers for response1
 0297           ;    to their values as initially configured.
 0297           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0297           ;
 0297           ;       INPUTS: None.
 0297           ;      RETURNS: Nothing.
 0297           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0297           ;               modified as may the Page Pointer registers!
 0297           ;               In the large memory model currently only the page
 0297           ;               pointer registers listed below are modified.  This does
 0297           ;               not guarantee that in future implementations of this
 0297           ;               function other page pointer registers will not be
 0297           ;               modified.
 0297           ;          
 0297           ;               Page Pointer Registers Modified: 
 0297           ;               CUR_PP
 0297           ;
 0297           _UnloadConfig_response1:
 0297            UnloadConfig_response1:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0297 10                push    x
 0298 70EF          and   F, ~FLAG_XIO_MASK
 029A 5000          mov     a, 0                    ; Specify bank 0
 029C 67            asr     a                       ; Store in carry flag
 029D                                               ; Bank 0 table address:
 029D 5000          mov     A, >UnloadConfigTBL_response1_Bank0
 029F 5700          mov     X, <UnloadConfigTBL_response1_Bank0
 02A1 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 02A4           
 02A4 5001          mov     a, 1                    ; Specify bank 1
 02A6 67            asr     a                       ; Store in carry flag
 02A7                                               ; Bank 1 table address:
 02A7 5000          mov     A, >UnloadConfigTBL_response1_Bank1
 02A9 5700          mov     X, <UnloadConfigTBL_response1_Bank1
 02AB 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 02AE           
 02AE 70EF          and   F, ~FLAG_XIO_MASK
 02B0           ; writing Row_0_LogicSelect_0 register
 02B0 41B3F0            and             reg[b3h], ~ fh
 02B3 43B305            or              reg[b3h],  5h
 02B6           ; writing Row_0_LogicSelect_1 register
 02B6 41B4F0            and             reg[b4h], ~ fh
 02B9 43B405            or              reg[b4h],  5h
 02BC           ; writing Row_0_OutputDrive_0 register
 02BC 41B5EC            and             reg[b5h], ~13h
 02BF 43B512            or              reg[b5h], 12h
 02C2           ; writing Row_0_OutputDrive_1 register
 02C2 41B6EE            and             reg[b6h], ~11h
 02C5 43B611            or              reg[b6h], 11h
 02C8           ; writing Row_1_InputMux register
 02C8 41B8FC            and             reg[b8h], ~ 3h
 02CB           ; writing Port_0_GlobalSelect register
 02CB 4102E3            and             reg[ 2h], ~1ch
 02CE 43021C            or              reg[ 2h], 1ch
 02D1           ; writing Port_0_DriveMode_2 register
 02D1 4103E3            and             reg[ 3h], ~1ch
 02D4           ; writing Port_0_DriveMode_1 register
 02D4 7110          or    F, FLAG_XIO_MASK
 02D6 4101E0            and             reg[ 1h], ~1fh
 02D9 430101            or              reg[ 1h],  1h
 02DC           ; writing Port_0_DriveMode_0 register
 02DC 4100E0            and             reg[ 0h], ~1fh
 02DF 43001E            or              reg[ 0h], 1eh
 02E2 70EF          and   F, ~FLAG_XIO_MASK
 02E4           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 02E4 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 02E7 2600EF            and             [ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], ~response1_BIT
 02EA 70EF          and   F, ~FLAG_XIO_MASK
 02EC 20                pop             x
 02ED           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02ED 7F            ret
 02EE           
 02EE           ;---------------------------------------------------------------------------
 02EE           ; Load Configuration response2
 02EE           ;
 02EE           ;    Load configuration registers for response2.
 02EE           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 02EE           ;
 02EE           ;       INPUTS: None.
 02EE           ;      RETURNS: Nothing.
 02EE           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 02EE           ;               modified as may the Page Pointer registers!
 02EE           ;               In the large memory model currently only the page
 02EE           ;               pointer registers listed below are modified.  This does
 02EE           ;               not guarantee that in future implementations of this
 02EE           ;               function other page pointer registers will not be
 02EE           ;               modified.
 02EE           ;          
 02EE           ;               Page Pointer Registers Modified: 
 02EE           ;               CUR_PP
 02EE           ;
 02EE           _LoadConfig_response2:
 02EE            LoadConfig_response2:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02EE 7110          or    F, FLAG_XIO_MASK
 02F0           ; writing Port_0_DriveMode_0 register
 02F0 4100E0            and             reg[ 0h], ~1fh
 02F3 430001            or              reg[ 0h],  1h
 02F6           ; writing Port_0_DriveMode_1 register
 02F6 4101E0            and             reg[ 1h], ~1fh
 02F9 43011E            or              reg[ 1h], 1eh
 02FC           ; writing Port_0_DriveMode_2 register
 02FC 70EF          and   F, ~FLAG_XIO_MASK
 02FE 4103E5            and             reg[ 3h], ~1ah
 0301 43031A            or              reg[ 3h], 1ah
 0304           ; writing Port_0_GlobalSelect register
 0304 4102E5            and             reg[ 2h], ~1ah
 0307           ; writing Row_0_LogicSelect_0 register
 0307 41B3F0            and             reg[b3h], ~ fh
 030A 43B303            or              reg[b3h],  3h
 030D           ; writing Row_0_LogicSelect_1 register
 030D 41B4F0            and             reg[b4h], ~ fh
 0310 43B403            or              reg[b4h],  3h
 0313           ; writing Row_0_OutputDrive_0 register
 0313 41B5EC            and             reg[b5h], ~13h
 0316 43B501            or              reg[b5h],  1h
 0319           ; writing Row_0_OutputDrive_1 register
 0319 41B6EE            and             reg[b6h], ~11h
 031C           ; writing Row_1_InputMux register
 031C 41B8FC            and             reg[b8h], ~ 3h
 031F 43B801            or              reg[b8h],  1h
 0322           
 0322 10                push    x
 0323 70EF          and   F, ~FLAG_XIO_MASK
 0325 5000          mov     a, 0                    ; Specify bank 0
 0327 67            asr     a                       ; Store in carry flag
 0328                                               ; Load bank 0 table:
 0328 5000          mov     A, >LoadConfigTBL_response2_Bank0
 032A 5700          mov     X, <LoadConfigTBL_response2_Bank0
 032C 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 032F           
 032F 5001          mov     a, 1                    ; Specify bank 1
 0331 67            asr     a                       ; Store in carry flag
 0332                                               ; Load bank 1 table:
 0332 5000          mov     A, >LoadConfigTBL_response2_Bank1
 0334 5700          mov     X, <LoadConfigTBL_response2_Bank1
 0336 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 0339           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0339 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 033C 2E0020            or              [ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], response2_BIT
 033F 70EF          and   F, ~FLAG_XIO_MASK
 0341 20                pop             x
 0342           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0342 7F            ret
 0343           
 0343           ;---------------------------------------------------------------------------
 0343           ; Unload Configuration response2
 0343           ;
 0343           ;    Reset configuration registers for response2
 0343           ;    to their values as initially configured.
 0343           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0343           ;
 0343           ;       INPUTS: None.
 0343           ;      RETURNS: Nothing.
 0343           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0343           ;               modified as may the Page Pointer registers!
 0343           ;               In the large memory model currently only the page
 0343           ;               pointer registers listed below are modified.  This does
 0343           ;               not guarantee that in future implementations of this
 0343           ;               function other page pointer registers will not be
 0343           ;               modified.
 0343           ;          
 0343           ;               Page Pointer Registers Modified: 
 0343           ;               CUR_PP
 0343           ;
 0343           _UnloadConfig_response2:
 0343            UnloadConfig_response2:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0343 10                push    x
 0344 70EF          and   F, ~FLAG_XIO_MASK
 0346 5000          mov     a, 0                    ; Specify bank 0
 0348 67            asr     a                       ; Store in carry flag
 0349                                               ; Bank 0 table address:
 0349 5000          mov     A, >UnloadConfigTBL_response2_Bank0
 034B 5700          mov     X, <UnloadConfigTBL_response2_Bank0
 034D 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 0350           
 0350 5001          mov     a, 1                    ; Specify bank 1
 0352 67            asr     a                       ; Store in carry flag
 0353                                               ; Bank 1 table address:
 0353 5000          mov     A, >UnloadConfigTBL_response2_Bank1
 0355 5700          mov     X, <UnloadConfigTBL_response2_Bank1
 0357 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 035A           
 035A 70EF          and   F, ~FLAG_XIO_MASK
 035C           ; writing Row_0_LogicSelect_0 register
 035C 41B3F0            and             reg[b3h], ~ fh
 035F 43B305            or              reg[b3h],  5h
 0362           ; writing Row_0_LogicSelect_1 register
 0362 41B4F0            and             reg[b4h], ~ fh
 0365 43B405            or              reg[b4h],  5h
 0368           ; writing Row_0_OutputDrive_0 register
 0368 41B5EC            and             reg[b5h], ~13h
 036B 43B512            or              reg[b5h], 12h
 036E           ; writing Row_0_OutputDrive_1 register
 036E 41B6EE            and             reg[b6h], ~11h
 0371 43B611            or              reg[b6h], 11h
 0374           ; writing Row_1_InputMux register
 0374 41B8FC            and             reg[b8h], ~ 3h
 0377           ; writing Port_0_GlobalSelect register
 0377 4102E5            and             reg[ 2h], ~1ah
 037A 43021A            or              reg[ 2h], 1ah
 037D           ; writing Port_0_DriveMode_2 register
 037D 4103E5            and             reg[ 3h], ~1ah
 0380           ; writing Port_0_DriveMode_1 register
 0380 7110          or    F, FLAG_XIO_MASK
 0382 4101E0            and             reg[ 1h], ~1fh
 0385 430101            or              reg[ 1h],  1h
 0388           ; writing Port_0_DriveMode_0 register
 0388 4100E0            and             reg[ 0h], ~1fh
 038B 43001E            or              reg[ 0h], 1eh
 038E 70EF          and   F, ~FLAG_XIO_MASK
 0390           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0390 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0393 2600DF            and             [ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], ~response2_BIT
 0396 70EF          and   F, ~FLAG_XIO_MASK
 0398 20                pop             x
 0399           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0399 7F            ret
 039A           
 039A           ;---------------------------------------------------------------------------
 039A           ; Load Configuration response3
 039A           ;
 039A           ;    Load configuration registers for response3.
 039A           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 039A           ;
 039A           ;       INPUTS: None.
 039A           ;      RETURNS: Nothing.
 039A           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 039A           ;               modified as may the Page Pointer registers!
 039A           ;               In the large memory model currently only the page
 039A           ;               pointer registers listed below are modified.  This does
 039A           ;               not guarantee that in future implementations of this
 039A           ;               function other page pointer registers will not be
 039A           ;               modified.
 039A           ;          
 039A           ;               Page Pointer Registers Modified: 
 039A           ;               CUR_PP
 039A           ;
 039A           _LoadConfig_response3:
 039A            LoadConfig_response3:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 039A 7110          or    F, FLAG_XIO_MASK
 039C           ; writing Port_0_DriveMode_0 register
 039C 4100E0            and             reg[ 0h], ~1fh
 039F 430001            or              reg[ 0h],  1h
 03A2           ; writing Port_0_DriveMode_1 register
 03A2 4101E0            and             reg[ 1h], ~1fh
 03A5 43011E            or              reg[ 1h], 1eh
 03A8           ; writing Port_0_DriveMode_2 register
 03A8 70EF          and   F, ~FLAG_XIO_MASK
 03AA 4103E9            and             reg[ 3h], ~16h
 03AD 430316            or              reg[ 3h], 16h
 03B0           ; writing Port_0_GlobalSelect register
 03B0 4102E9            and             reg[ 2h], ~16h
 03B3           ; writing Row_0_LogicSelect_0 register
 03B3 41B3F0            and             reg[b3h], ~ fh
 03B6 43B303            or              reg[b3h],  3h
 03B9           ; writing Row_0_LogicSelect_1 register
 03B9 41B4F0            and             reg[b4h], ~ fh
 03BC 43B403            or              reg[b4h],  3h
 03BF           ; writing Row_0_OutputDrive_0 register
 03BF 41B5EC            and             reg[b5h], ~13h
 03C2 43B501            or              reg[b5h],  1h
 03C5           ; writing Row_0_OutputDrive_1 register
 03C5 41B6EE            and             reg[b6h], ~11h
 03C8           ; writing Row_1_InputMux register
 03C8 41B8FC            and             reg[b8h], ~ 3h
 03CB 43B801            or              reg[b8h],  1h
 03CE           
 03CE 10                push    x
 03CF 70EF          and   F, ~FLAG_XIO_MASK
 03D1 5000          mov     a, 0                    ; Specify bank 0
 03D3 67            asr     a                       ; Store in carry flag
 03D4                                               ; Load bank 0 table:
 03D4 5000          mov     A, >LoadConfigTBL_response3_Bank0
 03D6 5700          mov     X, <LoadConfigTBL_response3_Bank0
 03D8 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 03DB           
 03DB 5001          mov     a, 1                    ; Specify bank 1
 03DD 67            asr     a                       ; Store in carry flag
 03DE                                               ; Load bank 1 table:
 03DE 5000          mov     A, >LoadConfigTBL_response3_Bank1
 03E0 5700          mov     X, <LoadConfigTBL_response3_Bank1
 03E2 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 03E5           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 03E5 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 03E8 2E0040            or              [ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], response3_BIT
 03EB 70EF          and   F, ~FLAG_XIO_MASK
 03ED 20                pop             x
 03EE           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 03EE 7F            ret
 03EF           
 03EF           ;---------------------------------------------------------------------------
 03EF           ; Unload Configuration response3
 03EF           ;
 03EF           ;    Reset configuration registers for response3
 03EF           ;    to their values as initially configured.
 03EF           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 03EF           ;
 03EF           ;       INPUTS: None.
 03EF           ;      RETURNS: Nothing.
 03EF           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 03EF           ;               modified as may the Page Pointer registers!
 03EF           ;               In the large memory model currently only the page
 03EF           ;               pointer registers listed below are modified.  This does
 03EF           ;               not guarantee that in future implementations of this
 03EF           ;               function other page pointer registers will not be
 03EF           ;               modified.
 03EF           ;          
 03EF           ;               Page Pointer Registers Modified: 
 03EF           ;               CUR_PP
 03EF           ;
 03EF           _UnloadConfig_response3:
 03EF            UnloadConfig_response3:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 03EF 10                push    x
 03F0 70EF          and   F, ~FLAG_XIO_MASK
 03F2 5000          mov     a, 0                    ; Specify bank 0
 03F4 67            asr     a                       ; Store in carry flag
 03F5                                               ; Bank 0 table address:
 03F5 5000          mov     A, >UnloadConfigTBL_response3_Bank0
 03F7 5700          mov     X, <UnloadConfigTBL_response3_Bank0
 03F9 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 03FC           
 03FC 5001          mov     a, 1                    ; Specify bank 1
 03FE 67            asr     a                       ; Store in carry flag
 03FF                                               ; Bank 1 table address:
 03FF 5000          mov     A, >UnloadConfigTBL_response3_Bank1
 0401 5700          mov     X, <UnloadConfigTBL_response3_Bank1
 0403 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 0406           
 0406 70EF          and   F, ~FLAG_XIO_MASK
 0408           ; writing Row_0_LogicSelect_0 register
 0408 41B3F0            and             reg[b3h], ~ fh
 040B 43B305            or              reg[b3h],  5h
 040E           ; writing Row_0_LogicSelect_1 register
 040E 41B4F0            and             reg[b4h], ~ fh
 0411 43B405            or              reg[b4h],  5h
 0414           ; writing Row_0_OutputDrive_0 register
 0414 41B5EC            and             reg[b5h], ~13h
 0417 43B512            or              reg[b5h], 12h
 041A           ; writing Row_0_OutputDrive_1 register
 041A 41B6EE            and             reg[b6h], ~11h
 041D 43B611            or              reg[b6h], 11h
 0420           ; writing Row_1_InputMux register
 0420 41B8FC            and             reg[b8h], ~ 3h
 0423           ; writing Port_0_GlobalSelect register
 0423 4102E9            and             reg[ 2h], ~16h
 0426 430216            or              reg[ 2h], 16h
 0429           ; writing Port_0_DriveMode_2 register
 0429 4103E9            and             reg[ 3h], ~16h
 042C           ; writing Port_0_DriveMode_1 register
 042C 7110          or    F, FLAG_XIO_MASK
 042E 4101E0            and             reg[ 1h], ~1fh
 0431 430101            or              reg[ 1h],  1h
 0434           ; writing Port_0_DriveMode_0 register
 0434 4100E0            and             reg[ 0h], ~1fh
 0437 43001E            or              reg[ 0h], 1eh
 043A 70EF          and   F, ~FLAG_XIO_MASK
 043C           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 043C 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 043F 2600BF            and             [ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], ~response3_BIT
 0442 70EF          and   F, ~FLAG_XIO_MASK
 0444 20                pop             x
 0445           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0445 7F            ret
 0446           
 0446           ;---------------------------------------------------------------------------
 0446           ; Load Configuration response4
 0446           ;
 0446           ;    Load configuration registers for response4.
 0446           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0446           ;
 0446           ;       INPUTS: None.
 0446           ;      RETURNS: Nothing.
 0446           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0446           ;               modified as may the Page Pointer registers!
 0446           ;               In the large memory model currently only the page
 0446           ;               pointer registers listed below are modified.  This does
 0446           ;               not guarantee that in future implementations of this
 0446           ;               function other page pointer registers will not be
 0446           ;               modified.
 0446           ;          
 0446           ;               Page Pointer Registers Modified: 
 0446           ;               CUR_PP
 0446           ;
 0446           _LoadConfig_response4:
 0446            LoadConfig_response4:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0446 7110          or    F, FLAG_XIO_MASK
 0448           ; writing Port_0_DriveMode_0 register
 0448 4100E0            and             reg[ 0h], ~1fh
 044B 430001            or              reg[ 0h],  1h
 044E           ; writing Port_0_DriveMode_1 register
 044E 4101E0            and             reg[ 1h], ~1fh
 0451 43011E            or              reg[ 1h], 1eh
 0454           ; writing Port_0_DriveMode_2 register
 0454 70EF          and   F, ~FLAG_XIO_MASK
 0456 4103F1            and             reg[ 3h], ~ eh
 0459 43030E            or              reg[ 3h],  eh
 045C           ; writing Port_0_GlobalSelect register
 045C 4102F1            and             reg[ 2h], ~ eh
 045F           ; writing Row_0_InputMux register
 045F 41B0FC            and             reg[b0h], ~ 3h
 0462 43B001            or              reg[b0h],  1h
 0465           ; writing Row_0_LogicSelect_0 register
 0465 41B3F0            and             reg[b3h], ~ fh
 0468 43B303            or              reg[b3h],  3h
 046B           ; writing Row_0_LogicSelect_1 register
 046B 41B4F0            and             reg[b4h], ~ fh
 046E 43B403            or              reg[b4h],  3h
 0471           ; writing Row_0_OutputDrive_0 register
 0471 41B5EC            and             reg[b5h], ~13h
 0474 43B501            or              reg[b5h],  1h
 0477           ; writing Row_0_OutputDrive_1 register
 0477 41B6EE            and             reg[b6h], ~11h
 047A           ; writing Row_1_InputMux register
 047A 41B8FC            and             reg[b8h], ~ 3h
 047D 43B801            or              reg[b8h],  1h
 0480           
 0480 10                push    x
 0481 70EF          and   F, ~FLAG_XIO_MASK
 0483 5000          mov     a, 0                    ; Specify bank 0
 0485 67            asr     a                       ; Store in carry flag
 0486                                               ; Load bank 0 table:
 0486 5000          mov     A, >LoadConfigTBL_response4_Bank0
 0488 5700          mov     X, <LoadConfigTBL_response4_Bank0
 048A 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 048D           
 048D 5001          mov     a, 1                    ; Specify bank 1
 048F 67            asr     a                       ; Store in carry flag
 0490                                               ; Load bank 1 table:
 0490 5000          mov     A, >LoadConfigTBL_response4_Bank1
 0492 5700          mov     X, <LoadConfigTBL_response4_Bank1
 0494 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 0497           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0497 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 049A 2E0080            or              [ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], response4_BIT
 049D 70EF          and   F, ~FLAG_XIO_MASK
 049F 20                pop             x
 04A0           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04A0 7F            ret
 04A1           
 04A1           ;---------------------------------------------------------------------------
 04A1           ; Unload Configuration response4
 04A1           ;
 04A1           ;    Reset configuration registers for response4
 04A1           ;    to their values as initially configured.
 04A1           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 04A1           ;
 04A1           ;       INPUTS: None.
 04A1           ;      RETURNS: Nothing.
 04A1           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 04A1           ;               modified as may the Page Pointer registers!
 04A1           ;               In the large memory model currently only the page
 04A1           ;               pointer registers listed below are modified.  This does
 04A1           ;               not guarantee that in future implementations of this
 04A1           ;               function other page pointer registers will not be
 04A1           ;               modified.
 04A1           ;          
 04A1           ;               Page Pointer Registers Modified: 
 04A1           ;               CUR_PP
 04A1           ;
 04A1           _UnloadConfig_response4:
 04A1            UnloadConfig_response4:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 04A1 10                push    x
 04A2 70EF          and   F, ~FLAG_XIO_MASK
 04A4 5000          mov     a, 0                    ; Specify bank 0
 04A6 67            asr     a                       ; Store in carry flag
 04A7                                               ; Bank 0 table address:
 04A7 5000          mov     A, >UnloadConfigTBL_response4_Bank0
 04A9 5700          mov     X, <UnloadConfigTBL_response4_Bank0
 04AB 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 04AE           
 04AE 5001          mov     a, 1                    ; Specify bank 1
 04B0 67            asr     a                       ; Store in carry flag
 04B1                                               ; Bank 1 table address:
 04B1 5000          mov     A, >UnloadConfigTBL_response4_Bank1
 04B3 5700          mov     X, <UnloadConfigTBL_response4_Bank1
 04B5 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 04B8           
 04B8 70EF          and   F, ~FLAG_XIO_MASK
 04BA           ; writing Row_0_InputMux register
 04BA 41B0FC            and             reg[b0h], ~ 3h
 04BD           ; writing Row_0_LogicSelect_0 register
 04BD 41B3F0            and             reg[b3h], ~ fh
 04C0 43B305            or              reg[b3h],  5h
 04C3           ; writing Row_0_LogicSelect_1 register
 04C3 41B4F0            and             reg[b4h], ~ fh
 04C6 43B405            or              reg[b4h],  5h
 04C9           ; writing Row_0_OutputDrive_0 register
 04C9 41B5EC            and             reg[b5h], ~13h
 04CC 43B512            or              reg[b5h], 12h
 04CF           ; writing Row_0_OutputDrive_1 register
 04CF 41B6EE            and             reg[b6h], ~11h
 04D2 43B611            or              reg[b6h], 11h
 04D5           ; writing Row_1_InputMux register
 04D5 41B8FC            and             reg[b8h], ~ 3h
 04D8           ; writing Port_0_GlobalSelect register
 04D8 4102F1            and             reg[ 2h], ~ eh
 04DB 43020E            or              reg[ 2h],  eh
 04DE           ; writing Port_0_DriveMode_2 register
 04DE 4103F1            and             reg[ 3h], ~ eh
 04E1           ; writing Port_0_DriveMode_1 register
 04E1 7110          or    F, FLAG_XIO_MASK
 04E3 4101E0            and             reg[ 1h], ~1fh
 04E6 430101            or              reg[ 1h],  1h
 04E9           ; writing Port_0_DriveMode_0 register
 04E9 4100E0            and             reg[ 0h], ~1fh
 04EC 43001E            or              reg[ 0h], 1eh
 04EF 70EF          and   F, ~FLAG_XIO_MASK
 04F1           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 04F1 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 04F4 26007F            and             [ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], ~response4_BIT
 04F7 70EF          and   F, ~FLAG_XIO_MASK
 04F9 20                pop             x
 04FA           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04FA 7F            ret
 04FB           
 04FB           ;---------------------------------------------------------------------------
 04FB           ; Load Configuration servo_transmit
 04FB           ;
 04FB           ;    Load configuration registers for servo_transmit.
 04FB           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 04FB           ;
 04FB           ;       INPUTS: None.
 04FB           ;      RETURNS: Nothing.
 04FB           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 04FB           ;               modified as may the Page Pointer registers!
 04FB           ;               In the large memory model currently only the page
 04FB           ;               pointer registers listed below are modified.  This does
 04FB           ;               not guarantee that in future implementations of this
 04FB           ;               function other page pointer registers will not be
 04FB           ;               modified.
 04FB           ;          
 04FB           ;               Page Pointer Registers Modified: 
 04FB           ;               CUR_PP
 04FB           ;
 04FB           _LoadConfig_servo_transmit:
 04FB            LoadConfig_servo_transmit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04FB 7110          or    F, FLAG_XIO_MASK
 04FD           ; writing Port_0_DriveMode_0 register
 04FD 4100E0            and             reg[ 0h], ~1fh
 0500 430001            or              reg[ 0h],  1h
 0503           ; writing Port_0_DriveMode_1 register
 0503 4101E0            and             reg[ 1h], ~1fh
 0506 43011E            or              reg[ 1h], 1eh
 0509           ; writing Port_0_DriveMode_2 register
 0509 70EF          and   F, ~FLAG_XIO_MASK
 050B 4103E1            and             reg[ 3h], ~1eh
 050E 43031E            or              reg[ 3h], 1eh
 0511           ; writing Port_0_GlobalSelect register
 0511 4102E1            and             reg[ 2h], ~1eh
 0514           ; writing Row_0_LogicSelect_0 register
 0514 41B3F0            and             reg[b3h], ~ fh
 0517 43B303            or              reg[b3h],  3h
 051A           ; writing Row_0_LogicSelect_1 register
 051A 41B4F0            and             reg[b4h], ~ fh
 051D 43B403            or              reg[b4h],  3h
 0520           ; writing Row_0_OutputDrive_0 register
 0520 41B5EC            and             reg[b5h], ~13h
 0523 43B501            or              reg[b5h],  1h
 0526           ; writing Row_0_OutputDrive_1 register
 0526 41B6EE            and             reg[b6h], ~11h
 0529           ; writing Row_1_InputMux register
 0529 41B8FC            and             reg[b8h], ~ 3h
 052C 43B801            or              reg[b8h],  1h
 052F           
 052F 10                push    x
 0530 70EF          and   F, ~FLAG_XIO_MASK
 0532 5000          mov     a, 0                    ; Specify bank 0
 0534 67            asr     a                       ; Store in carry flag
 0535                                               ; Load bank 0 table:
 0535 5000          mov     A, >LoadConfigTBL_servo_transmit_Bank0
 0537 5700          mov     X, <LoadConfigTBL_servo_transmit_Bank0
 0539 7C05D0        lcall   LoadConfig              ; Load the bank 0 values
 053C           
 053C 5001          mov     a, 1                    ; Specify bank 1
 053E 67            asr     a                       ; Store in carry flag
 053F                                               ; Load bank 1 table:
 053F 5000          mov     A, >LoadConfigTBL_servo_transmit_Bank1
 0541 5700          mov     X, <LoadConfigTBL_servo_transmit_Bank1
 0543 7C05D0        lcall   LoadConfig              ; Load the bank 1 values
 0546           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0546 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 0549 2E0101            or              [ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], servo_transmit_BIT
 054C 70EF          and   F, ~FLAG_XIO_MASK
 054E 20                pop             x
 054F           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 054F 7F            ret
 0550           
 0550           ;---------------------------------------------------------------------------
 0550           ; Unload Configuration servo_transmit
 0550           ;
 0550           ;    Reset configuration registers for servo_transmit
 0550           ;    to their values as initially configured.
 0550           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0550           ;
 0550           ;       INPUTS: None.
 0550           ;      RETURNS: Nothing.
 0550           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0550           ;               modified as may the Page Pointer registers!
 0550           ;               In the large memory model currently only the page
 0550           ;               pointer registers listed below are modified.  This does
 0550           ;               not guarantee that in future implementations of this
 0550           ;               function other page pointer registers will not be
 0550           ;               modified.
 0550           ;          
 0550           ;               Page Pointer Registers Modified: 
 0550           ;               CUR_PP
 0550           ;
 0550           _UnloadConfig_servo_transmit:
 0550            UnloadConfig_servo_transmit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0550 10                push    x
 0551 70EF          and   F, ~FLAG_XIO_MASK
 0553 5000          mov     a, 0                    ; Specify bank 0
 0555 67            asr     a                       ; Store in carry flag
 0556                                               ; Bank 0 table address:
 0556 5000          mov     A, >UnloadConfigTBL_servo_transmit_Bank0
 0558 5700          mov     X, <UnloadConfigTBL_servo_transmit_Bank0
 055A 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 055D           
 055D 5001          mov     a, 1                    ; Specify bank 1
 055F 67            asr     a                       ; Store in carry flag
 0560                                               ; Bank 1 table address:
 0560 5000          mov     A, >UnloadConfigTBL_servo_transmit_Bank1
 0562 5700          mov     X, <UnloadConfigTBL_servo_transmit_Bank1
 0564 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 0567           
 0567 70EF          and   F, ~FLAG_XIO_MASK
 0569           ; writing Row_0_LogicSelect_0 register
 0569 41B3F0            and             reg[b3h], ~ fh
 056C 43B305            or              reg[b3h],  5h
 056F           ; writing Row_0_LogicSelect_1 register
 056F 41B4F0            and             reg[b4h], ~ fh
 0572 43B405            or              reg[b4h],  5h
 0575           ; writing Row_0_OutputDrive_0 register
 0575 41B5EC            and             reg[b5h], ~13h
 0578 43B512            or              reg[b5h], 12h
 057B           ; writing Row_0_OutputDrive_1 register
 057B 41B6EE            and             reg[b6h], ~11h
 057E 43B611            or              reg[b6h], 11h
 0581           ; writing Row_1_InputMux register
 0581 41B8FC            and             reg[b8h], ~ 3h
 0584           ; writing Port_0_GlobalSelect register
 0584 4102E1            and             reg[ 2h], ~1eh
 0587 43021E            or              reg[ 2h], 1eh
 058A           ; writing Port_0_DriveMode_2 register
 058A 4103E1            and             reg[ 3h], ~1eh
 058D           ; writing Port_0_DriveMode_1 register
 058D 7110          or    F, FLAG_XIO_MASK
 058F 4101E0            and             reg[ 1h], ~1fh
 0592 430101            or              reg[ 1h],  1h
 0595           ; writing Port_0_DriveMode_0 register
 0595 4100E0            and             reg[ 0h], ~1fh
 0598 43001E            or              reg[ 0h], 1eh
 059B 70EF          and   F, ~FLAG_XIO_MASK
 059D           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 059D 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 05A0 2601FE            and             [ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], ~servo_transmit_BIT
 05A3 70EF          and   F, ~FLAG_XIO_MASK
 05A5 20                pop             x
 05A6           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 05A6 7F            ret
 05A7           
 05A7           ;---------------------------------------------------------------------------
 05A7           ; Unload Configuration Total
 05A7           ;
 05A7           ;    Reset configuration registers for Total
 05A7           ;    to their values as initially configured.
 05A7           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 05A7           ;
 05A7           ;       INPUTS: None.
 05A7           ;      RETURNS: Nothing.
 05A7           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 05A7           ;               modified as may the Page Pointer registers!
 05A7           ;               In the large memory model currently only the page
 05A7           ;               pointer registers listed below are modified.  This does
 05A7           ;               not guarantee that in future implementations of this
 05A7           ;               function other page pointer registers will not be
 05A7           ;               modified.
 05A7           ;          
 05A7           ;               Page Pointer Registers Modified: 
 05A7           ;               CUR_PP
 05A7           ;
 05A7           _UnloadConfig_Total:
 05A7            UnloadConfig_Total:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 05A7 10                push    x
 05A8 70EF          and   F, ~FLAG_XIO_MASK
 05AA 5000          mov     a, 0                    ; Specify bank 0
 05AC 67            asr     a                       ; Store in carry flag
 05AD                                               ; Bank 0 table address:
 05AD 5000          mov     A, >UnloadConfigTBL_Total_Bank0
 05AF 5700          mov     X, <UnloadConfigTBL_Total_Bank0
 05B1 7C05D0        lcall   LoadConfig              ; Unload the bank 0 values
 05B4           
 05B4 5001          mov     a, 1                    ; Specify bank 1
 05B6 67            asr     a                       ; Store in carry flag
 05B7                                               ; Bank 1 table address:
 05B7 5000          mov     A, >UnloadConfigTBL_Total_Bank1
 05B9 5700          mov     X, <UnloadConfigTBL_Total_Bank1
 05BB 7C05D0        lcall   LoadConfig              ; Unload the bank 1 values
 05BE           
 05BE 70EF          and   F, ~FLAG_XIO_MASK
 05C0           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 05C0 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 05C3 550000            mov             [ACTIVE_CONFIG_STATUS+0], 0
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 05C6 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 05C9 550100            mov             [ACTIVE_CONFIG_STATUS+1], 0
 05CC 70EF          and   F, ~FLAG_XIO_MASK
 05CE 20                pop             x
 05CF           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 05CF 7F            ret
 05D0           
 05D0           
 05D0           
 05D0           
 05D0           ;---------------------------------------------------------------------------
 05D0           ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
 05D0           ;              pairs. Terminate on address=0xFF.
 05D0           ;
 05D0           ;  INPUTS:  [A,X] points to the table to be loaded
 05D0           ;           Flag Register Carry bit encodes the Register Bank
 05D0           ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
 05D0           ;
 05D0           ;  RETURNS: nothing.
 05D0           ;
 05D0           ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
 05D0           ;                X-3 Temporary store for register address
 05D0           ;                X-2 LSB of config table address
 05D0           ;                X-1 MSB of config table address
 05D0           ;
 05D0           LoadConfig:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 05D0 3802          add     SP, 2                   ; Set up local vars
 05D2 10            push    X                       ; Save config table address on stack
 05D3 08            push    A
 05D4 4F            mov     X, SP
 05D5 56FC00        mov     [X-4], 0                ; Set default Destination to Bank 0
 05D8 D004          jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
 05DA 56FC01        mov     [X-4], 1                ; No Carry: default to Bank 1
 05DD           .BankSelectSaved:
 05DD 18            pop     A
 05DE 20            pop     X
 05DF           
 05DF           LoadConfigLp:
 05DF 70EF          and   F, ~FLAG_XIO_MASK
 05E1 62E300        mov   reg[RES_WDT], 00h
 05E4 10            push    X                       ; Preserve the config table address
 05E5 08            push    A
 05E6 28            romx                            ; Load register address from table
 05E7 39FF          cmp     A, END_CONFIG_TABLE     ; End of table?
 05E9 A01F          jz      EndLoadConfig           ;   Yes, go wrap it up
 05EB 4F            mov     X, SP                   ;
 05EC 48FC01        tst     [X-4], 1                ; Loading IO Bank 1?
 05EF A003          jz      .IOBankNowSet           ;    No, Bank 0 is fine
 05F1 7110          or    F, FLAG_XIO_MASK
 05F3           .IOBankNowSet:
 05F3 54FD          mov     [X-3], A                ; Stash the register address
 05F5 18            pop     A                       ; Retrieve the table address
 05F6 20            pop     X
 05F7 75            inc     X                       ; Advance to the data byte
 05F8 0900          adc     A, 0
 05FA 10            push    X                       ; Save the config table address again
 05FB 08            push    A
 05FC 28            romx                            ; load config data from the table
 05FD 4F            mov     X, SP                   ; retrieve the register address
 05FE 59FD          mov     X, [X-3]
 0600 6100          mov     reg[X], A               ; Configure the register
 0602 18            pop     A                       ; retrieve the table address
 0603 20            pop     X
 0604 75            inc     X                       ; advance to next table entry
 0605 0900          adc     A, 0
 0607 8FD7          jmp     LoadConfigLp            ; loop to configure another register
 0609           EndLoadConfig:
 0609 38FC          add     SP, -4
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 060B 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 060D 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 060F 7F            ret
 0610           
                AREA InterruptRAM(ram, rel)
                
 0000           NO_SHADOW:
 0000           _NO_SHADOW:
 0000           ; active configuration status byte
 0000           ACTIVE_CONFIG_STATUS:   BLK     2
 0002           
                AREA text(rom, rel)
